/*
*
* Copyright (c) 2024 Ireh Choi
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define LSH LSHFT 
#define SH LSHFT 
#define CT LCTRL 
#define RCT RCTRL 
#define AL LALT
#define RAL RALT
#define GU LGUI
#define SPC SPACE

#define VMT C_MUTE
#define VDN C_VOL_DN
#define VUP C_VOL_UP

#define KPNL KP_NUM
#define KRET KP_ENTER
#define KMUL KP_MULTIPLY
#define KDIV KP_DIVIDE
#define KPLS KP_PLUS
#define KCOM KP_COMMA

#define SM SEMI

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 0

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 40
#define COMBO_PRIOR_IDLE 100


&mt {
    tapping-term-ms = <100>;
}; 
&sk {
    release-after-ms = <5000>;
    quick-release;
};
/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };
};


/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAB_HOME_ROW";
            #binding-cells = <2>;
            
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            bindings = <&kp>, <&kp>;
        };
        sht: sticky-hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_STICKY";
            #binding-cells = <2>;
            
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            bindings = <&sk>, <&kp>;
        };


        td_1t9: tap_dance_one_to_nine_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ONE_TO_NINE_LAYER";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&mo 1>, <&mo 9>;
        };
        td_3t10: tap_dance_three_to_ten_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_THREE_TO_TEN_LAYER";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&mo 3>, <&mo 10>;
        };
        minbar: mod_morph_minus_underbar {
            compatible = "zmk,behavior-mod-morph";
            label="MOD_MORPH_MINUS_UNDERBAR";
            #binding-cells = <0>;
            bindings = <&kp KP_MINUS>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT)>;
        };
        plseql: mod_morph_plus_equal {
            compatible = "zmk,behavior-mod-morph";
            label="MOD_MORPH_PLUS_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp KP_PLUS>, <&kp EQUAL>;
            mods = <(MOD_LSFT)>;
        };
        
    };
    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        left_tri_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };
        right_tri_layer {
            if-layers = <3 4>;
            then-layer = <6>;
        };
        left_right_one_tri_layer {
            if-layers = <1 3>;
            then-layer = <7>;
        };
        left_right_two_tri_layer {
            if-layers = <2 4>;
            then-layer = <8>;
        };
    };

    macros {
        ZMK_MACRO(BTAllClr, wait-ms=<1>; tap-ms=<1>; bindings=<
            &bt BT_SEL 0  &bt BT_CLR &bt BT_SEL 1  &bt BT_CLR &bt BT_SEL 2  &bt BT_CLR 
            &bt BT_SEL 3  &bt BT_CLR &bt BT_SEL 4  &bt BT_CLR >;)
            
        ZMK_MACRO(BTC0, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 0  &bt BT_CLR >;)
        ZMK_MACRO(BTC1, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 1  &bt BT_CLR >;)
        ZMK_MACRO(BTC2, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 2  &bt BT_CLR >;)
        ZMK_MACRO(BTC3, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 3  &bt BT_CLR >;)
        ZMK_MACRO(BTC4, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 4  &bt BT_CLR >;)
        
    };
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <2 3>;
            layers = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_del {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <3 4>;
            layers = <0 1>;
            bindings = <&kp DEL>;
        };
        combo_enter {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <14 15>;
            layers = <0 1>;
            bindings = <&kp RET>;
        };
        combo_bspc {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <15 16>;
            layers = <0 1>;
            bindings = <&kp BSPC>;
        };
        combo_tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <13 14>;
            layers = <0 1>;
            bindings = <&kp TAB>;
        };
    };

    


    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
/* --------------------------------------------------------------------------------
// | 0  | 1  | 2  | 3  | 4  | 5  |      | 6  | 7  | 8  | 9  | 10 | 11 |
// | 12 | 13 | 14 | 15 | 16 | 17 |      | 18 | 19 | 20 | 21 | 22 | 23 |
// | 24 | 25 | 26 | 27 | 28 | 29 |      | 30 | 31 | 32 | 33 | 34 | 35 |
//      | 36 | 37 | 38 | 39 | 40 |      | 41 | 42 | 43 | 44 | 45 |

// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &none
&kp LCTRL &hm GU A  &hm AL S  &hm CT D  &hm SH F  &kp G         &kp H     &hm SH J  &hm CT K  &hm AL L  &kp SM    &kp RALT
&kp LSH   &kp COMMA &kp Z     &kp X     &kp C     &kp V         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &none
          &none     &kp LALT  &kp SPACE &td_1t9   &mo 2         &mo 4     &td_3t10  &kp RET   &kp SH    &none
            >;
        };

        left_one_layer { //1
/* --------------------------------------------------------------------------------
// |  TAB |  1   |  2   |  3   |  4   |  5   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  6   |  7   |  8   |  9   |  0   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |   
*/
            bindings = <
&kp CAPS  &kp KDIV  &kp N7    &kp N8    &kp N9    &minbar       &kp LPAR  &kp RPAR  &kp LT    &kp GT    &kp P     &trans
&kp GRAVE &kp KMUL  &sht AL N4 &sht CT N5 &sht SH N6 &plseql       &kp LBRC  &kp RBRC  &kp LT    &kp GT    &kp SQT   &kp RCTRL
&kp KPNL  &kp KP_DOT &kp N1   &kp N2    &kp N3    &kp KP_N0     &kp LBKT  &kp RBKT  &kp M     &kp DOT   &kp BSLH  &trans
          &trans    &trans    &kp SPACE &trans    &trans        &trans    &trans    &kp KRET  &trans    &none
            >;
        };
        

        left_two_layer { //2
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |    
*/
            bindings = <
&trans    &none     &kp HOME  &kp UP    &kp END   &kp PG_UP     &kp F1    &kp F2    &kp F3    &kp F4    &kp MINUS &trans
&trans    &none     &kp LEFT  &kp DOWN  &kp RIGHT &kp PG_DN     &kp F5    &kp F6    &kp F7    &kp F8    &kp EQUAL &trans
&trans    &none     &none     &none     &none     &none         &kp F9    &kp F10   &kp F11   &kp F12   &kp BSLH  &trans
          &trans    &trans    &trans    &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &trans
            >;
        };
        
        right_one_layer { //3
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |  
*/
            bindings = <
&kp TAB   &kp ESC   &none     &none     &none     &none         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &kp LALT  &none     &none     &none     &none         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp DEL   &none     &none     &none     &none         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &trans
          &mkp RCLK &mkp MCLK &mkp LCLK &trans    &trans        &trans    &trans    &trans    &trans    &trans
            >;
        };

        
        right_two_layer { //4
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &BTC0  &BTC1  &BTC2  &BTC3  &BTC4    &BTAllClr
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &none     &none     &none     &none     &out OUT_BLE     &out OUT_USB     
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &none     &none     &none     
            >;
        };
        
        left_both_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |   
*/
            bindings = <
&kp TAB   &kp P     &kp O     &kp I     &kp U     &kp Y       &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp RALT  &hm RAL SM &hm AL L &hm CT K &hm SH J &kp H      &kp H     &kp J     &kp K     &kp L     &kp SM  &kp SQT
&kp DEL   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B       &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &trans
          &trans  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &trans    &trans   &trans
            >;
        };

        right_both_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |   
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &BTC0  &BTC1  &BTC2  &BTC3  &BTC4    &BTAllClr
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &none     &none     &none     &none     &out OUT_BLE     &out OUT_USB     
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &none     &none     &none     
            >;
        };

        left_right_one_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &trans
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &trans
            >;
        };

        left_right_two_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &trans
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &trans
            >;
        };

        left_one_double_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&trans    &kp ESC   &kp HOME  &kp UP    &kp END   &kp PG_UP     &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&trans    &none     &kp LEFT  &kp DOWN  &kp RIGHT &kp PG_DN     &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&trans    &none     &none     &none     &none     &none         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &trans
          &trans    &trans    &trans    &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &trans
            >;
        };

        
        right_one_double_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&trans    &kp ESC   &kp HOME  &kp UP    &kp END   &mkp MCLK     &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&trans    &kp BSPC  &kp LEFT  &kp DOWN  &kp RIGHT &mkp LCLK     &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&trans    &kp DEL   &kp PG_UP &kp RET   &kp PG_DN &mkp RCLK     &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &trans
          &trans    &trans    &trans    &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &trans
            >;
        };
    };

    
};
